# 1011. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10

Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.



Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: weights = [3,2,2,4,1,4], days = 3
Output: 6
Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:
1st day: 3, 2
2nd day: 2, 4
3rd day: 1, 4


Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: weights = [1,2,3,1,1], days = 4
Output: 3
Explanation:
1st day: 1
2nd day: 2
3rd day: 3
4th day: 1, 1


JASON'S ANALYSIS

Thinking of adding all the values up and dividing with the # of days.
Then not sure what to do next...

class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int lowest = Integer.MAX_VALUE;

        for(int i = 0 ; i < weights.length; i++) {
            while(days > 0) {

                days--;
            }
        }
        return lowest;
    }
}

Very similar to Koko Eating Bananas

ALGORITHM

Code with Alisha (https://www.youtube.com/watch?v=hpF87ioNqjA)

1. Find the maximum value within the element (which will be the lowest value when calculating from the total elements) and total sum
(ie. If given value is [3, 5, 4, 6, 2], then low = 6 and high = 20)

2. Based on the low and high value, conduct binary search. (low + high / 2 = 13)

3. If 13 meets the condition (meaning if the value is less than or equal to the mid value) within the given amount of time, 
then we need to decrease the answer (meaning we need to find a value that is less than 13)

4. Change the mid value and conduct another binary search

5. Find until we find the minimum value and return it

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

PYTHON