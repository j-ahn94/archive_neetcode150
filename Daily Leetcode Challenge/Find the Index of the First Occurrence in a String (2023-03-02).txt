# 28. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.


JASON'S ANALYSIS

ANALYSIS/PSEUDOCODE

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA
class Solution {
    public int strStr(String haystack, String needle) {
        // Time - O(n)
        // Space - O(1)
        // utilize two pointers approach, where pointer i and pointer j start from index 0
        // if the two characters match, then keep increasing j pointer
        // if the two characters do not match, move i-pointer to where j is currently standing at.
        // no need to initialize the variable

        for(int i = 0; i < haystack.length() - needle.length() + 1; i++) {
            if(haystack.charAt(i) == needle.charAt(0)) {
                if(haystack.substring(i, needle.length() + i).equals(needle)) {
                    return i;
                }
            }
        }
        return -1;
    }
}


PYTHON
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if needle == "":
            return 0
        for i in range(len(haystack) + 1 - len(needle)):
            for j in range(len(needle)):
                if haystack[i + j] != needle[j]:
                    break
                if j == len(needle) - 1: 
                    return True
        
        return -1
