# 104. / EASY

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [3,9,20,null,null,15,7]
Output: 3


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [1,null,2]
Output: 2


JASON'S ANALYSIS

Run it in 'Depth-First Search' analysis and add 1 to include the root node.

ALGORITHM

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0; 
        }
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

Depth-First Search Algorithm (traversing trees by going down)

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0; 
        }
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

Breadth-First Search Algorithm (traversing trees level-by-level and see which level we are at)

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0

        level = 0
        q = deque([root])
        while q:

            for i in range(len(q)):
                node = q.popleft()
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)

            level += 1

Iterative DFS 

PYTHON