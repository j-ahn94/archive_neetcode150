# 382. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Implement the Solution class:

Solution(ListNode head) Initializes the object with the head of the singly-linked list head.
int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input
["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 3, 2, 2, 3]

Explanation
Solution solution = new Solution([1, 2, 3]);
solution.getRandom(); // return 1
solution.getRandom(); // return 3
solution.getRandom(); // return 2
solution.getRandom(); // return 2
solution.getRandom(); // return 3
// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.


JASON'S ANALYSIS

ANALYSIS/PSEUDOCODE

Time - O(n)
Space - O(1)

We have to use 'reservoir sampling' to reduce the space complexity.
Definition of 'reservoir sampling': Reservoir sampling is randomized algorithm that is used to select 'k' out of 'n' samples.
               'n' is usually very large or unknown.


CODE
------------------------------------------------------------------------------------------------------------------------------------------

Time - O(n)
Space - O(1)

JAVA

class Solution {
    ListNode head = null;

    public Solution(ListNode head){
        this.head = head;
    }

    public int getRandom() {
        ListNode curr = head;
        int i = 1;
        int res = 0;

        while(curr != null) {
            if(Math.random() < 1.0 / i) {
                res = curr.val;
            }
            i++;
            curr = curr.next;
        }
        return res;
    }
}


PYTHON