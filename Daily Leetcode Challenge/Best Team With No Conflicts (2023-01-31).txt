# 1626. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. 
The score of the team is the sum of scores of all the players in the team.

However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. 
A conflict does not occur between players of the same age.

Given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
Output: 34
Explanation: You can choose all the players.


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: scores = [4,5,6,5], ages = [2,1,2,1]
Output: 16
Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.



JASON'S ANALYSIS

ALGORITHM

DFS - use recursion (time: O(n^2))  <- too slow

DP - time: O(n^2)
     compare the age of between each score and add it together.
     record the maximum value of the added values





CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

PYTHON

class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        pairs = [[scores[i], ages[i] for i in range(len(scores))] <- creating list of pairs since length of scores and ages are the same
        pairs.sort() <- change to ascending order
        dp = [pairs[i][0] for i in range(len(pairs))] <- will be initialized with scores in ascending order

        for i in range(len(pairs)):
            mScore, mAge = pairs[i]
            for j in range(i): <- looking at values up until the value of 'i'
                score, age = pairs[j]
                if mAge >= age:
                    dp[i] = max(dp[i], mScore + dp[j])
        return max(dp)

