# 35. / EASY

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [1,3,5,6], target = 5
Output: 2


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [1,3,5,6], target = 7
Output: 4


JASON'S ANALYSIS

ALGORITHM

1. Conduct binary search
2. If number doesn't exist, then exit out of while-loop and return the left pointer. Why?
3. Reason is to resolve the out-of-bound issue

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

PYTHON

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        # Log(n)
        l, r = 0, len(nums) - 1

        while(l <= r):
            mid = (l + r) // 2

            if target == nums[mid]:
                return mid
            
            if target > nums[mid]:
                l = mid + 1
            
            else:
                r = mid - 1
        
        return l


