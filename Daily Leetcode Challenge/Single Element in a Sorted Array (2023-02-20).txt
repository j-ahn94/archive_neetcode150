# 540. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.



Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [3,3,7,7,10,11,11]
Output: 10



JASON'S ANALYSIS

*We know that there has to be an odd length of array (since only one element has one)

1. Run a binary search
2. If the number has two, then eliminate the two and find the side that has the odd side (ie. [1, 1, 2, 3, 3, 4, 4]. Eliminate [3, 3] so we now look at [1, 1, 2] side)


ALGORITHM

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

PYTHON

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l, r = 0, len(nums) - 1

        while l <= r:
            m + l + ((r - 1) // 2) <- Prevent overflow, we do it this way
            if((m - 1 < 0 or nums[m - 1] != nums[m]) and 
                (m + 1 == len(nums) or nums[m] != nums[m + 1])):
                return nums[m]
            leftSize = m - 1 if nums[m - 1] == nums[m] else m
            if leftSize % 2:
                r = m - 1
            else:
                l = m + 1