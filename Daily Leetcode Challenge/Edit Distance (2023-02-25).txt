# 72. / EDIT DISTANCE

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')


JASON'S ANALYSIS

ANALYSIS / PSEUDOCODE

Classic Dynamic Programming question

*If one of the strings are empty, then return length of non-empty string

Condition 1 - What if word2 is empty?
ans: Possible to convert word1 to convert into empty by deleting all the characters. Time complexity will be length of word1 (since we're deleting all words in word1).

Condition 2 - What if word1 is empty?
ans: Posible to convert word1 by adding the characters in it. Time complexity will be length of word2 (since we're adding all words in words1).

Example: 
word1 = a, b, d <- i pointer
word2 = a, c, d <- j pointer

1. If the first characters are equal in both word1 and word2, increment both word1[i] and word2[j] by + 1 to find whether next character is same or not.
2. If characters are different, then you can either
    i) insert (i, j + 1)
   ii) delete (i + 1, j)
  iii) replace (i + 1, j + 1)
3. Keep doing (2) until both word1 and word2 have empty strings. This is the base case.


We need to use Dynamic Programming approach, where we need to think that the first character depends on the character next to it.

Bottom-up programming is required in the 2D dimensional array.



CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

PYTHON

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        cache = [ [float("inf")] * (len(word2)] + 1 ) for i in range(len(word1) + 1)]
        
        for j in range(len(word2) + 1):
            cache[len(word1)][j] = len(word2) - j
        for i in range(len(word1) + 1):
            cache[i][len(word2)] = len(word1) - i

        for i in range(len(word1) - 1, -1, -1):
            for j in range(len(word2) - 1, -1, -1):
                if word1[i] == word2[j]:
                    cache[i][j] = cache[i + 1][j + 1]
                else:
                    cache[i][j] = 1 + min(cache[i + 1][j], cache[i][j + 1], cache[i + 1][j + 1])
        
        return cache[0][0]
