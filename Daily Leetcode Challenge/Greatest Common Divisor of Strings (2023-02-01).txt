# 1071. / EASY

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
For two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"



Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"

Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: str1 = "LEET", str2 = "CODE"
Output: ""


JASON'S ANALYSIS


ALGORITHM

Iterate through the smallest String 'str2' with greedy approach. For instance:

str1 = "ABCABC"   str2 = "ABC"  <- trying to see whether we can divide 'str2' with 'str1'. The mod [%] needs to result to 0.






CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

PYTHON

class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        len1, len2 = len(str1), len(str2)

        def isDivisor(l):
            if len1 % l or len2 % l:
                return False
            f1, f2 = len1 // l, len2 // l
            return str1[:l] * f1 == str1 and str[:l] * f2 == str2


        for l in range(min(len1, len2), 0, -1):
            if isDivisor(l):
                return str1[:l]
        return ""