# 129. / SUM ROOT TO LEAF NUMBERS

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.



Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.


JASON'S ANALYSIS
Time - O(n)
Space - O(h)

1. Go furthest down (left and right) and see how far down it goes by counting + 1 each time it goes down.
2. Initialize total sum variable to add all the values.


ANALYSIS/PSEUDOCODE

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    int total_sum = 0;

    public void preorder(TreeNode root, int sum) {
        if(root == null) {
            return;
        }
        
        sum = sum * 10 + root.val;

        if(root.left == null && root.right == null) {
            total_sum += sum;
        }
        preorder(root.left, sum);
        preorder(root.right, sum);
    }

    public int sumNumbers(TreeNode root) {
        preorder(root, 0);
        return total_sum;
    }
}

PYTHON