# 150. / EVALUATE REVERSE POLISH NOTATION   

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9



Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6


JASON'S ANALYSIS

1. 

ALGORITHM

Add each number to the stack. If the character is an operation, pop the two values from the stack and do the calculation.
Next, push the calculated number back to the stack.

O(n): adding each value and removing at most once

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();

        for(String token: tokens) {
            if(token.equals("+")) {
                stack.add(stack.pop() + stack.pop());
            } else if(token.equals("*")) {
                stack.add(stack.pop() * stack.pop());
            } else if(token.equals("-")) {
                int a = stack.pop();
                int b = stack.pop();
                stack.add(b - a);
            } else if(token.equals("/")) {
                int a = stack.pop();
                int b = stack.pop();
                stack.add(b / a);
            } else {
                stack.add(Integer.parseInt(token));
            }
        }

        return stack.pop();
    }
}
PYTHON

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for c in tokens:
            if c == "+":
                stack.append(stack.pop() + stack.pop())
            elif c == "-":
                a, b = stack.pop(), stack.pop()
                stack.append(b - a)
            elif c == "*":
                stack.append(stack.pop() * stack.pop())
            elif c == "/":
                a, b = stack.pop(), stack.pop()
                stack.append(int(b/ a))
            else:
                stack.append(int(c))
        return stack[0]