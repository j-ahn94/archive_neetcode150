# 20. / EASY

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.



Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: s = "()"
Output: true


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: s = "()[]{}"
Output: true

Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: s = "(]"
Output: false



JASON'S ANALYSIS

Using stack and pop method to see that if the characters are ')', '}' and ']', see if the popped character is '(', '{' and '['. If not, return false.


ALGORITHM

class Solution {
    public boolean isValid(String s) {
        Stack<Character> isStack = new Stack<Character>();

        for(char c: s.toCharArray()) {
            if(c == '(' || c == '{' || c == '[') {
                isStack.push(c);
            } else if(c == ')' && !isStack.isEmpty() && isStack.peek() == '(') {
                isStack.pop();
            } else if(c == '}' && isStack.isEmpty() && isStack.peek() == '{') {
                isStack.pop();
            } else if(c == ']' && isStack.isEmpty() && isStack.peek() == '[') {
                isStack.pop();
            }
        }
        return isStack.isEmpty();
    }
}
CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public boolean isValid(String s) {
        Stack<Character> isStack = new Stack<Character>();

        for(char c: s.toCharArray()) {
            if(c == '(' || c == '{' || c == '[') {
                isStack.push(c);
            } else if(c == ')' && !isStack.isEmpty() && isStack.peek() == '(') {
                isStack.pop();
            } else if(c == '}' && isStack.isEmpty() && isStack.peek() == '{') {
                isStack.pop();
            } else if(c == ']' && isStack.isEmpty() && isStack.peek() == '[') {
                isStack.pop();
            }
        }
        return isStack.isEmpty();
    }
}

PYTHON