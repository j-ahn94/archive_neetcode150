# 15. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.


Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


JASON'S ANALYSIS

Start the first pointer from index 0 and move the two other pointers from the second and last. If there is a match, then add it in the linkedlist array.


ALGORITHM

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> new_set = new HashSet<>();

        Arrays.sort(nums);

        for(int i = 0; i < nums.length - 2; i++) {
            int j = i + 1;
            int k = nums.length - 1;

            while(j < k) {
                int sum = nums[i] + nums[j] + nums[k];

                if(sum == 0) {
                    new_set.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                } else if(sum > 0) {
                    k--;
                } else {
                    j++;
                }
            }
        }
        return new ArrayList<>(new_set);
    }
}

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

1. Create a hash set to add linkedlist if the result return '0'.
2. Sort the array from least-to-most to conduct binary search first -> <- last
3. The first number initially starts at 0, while the rest of the two will conduct binary search
4. 

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> new_set = new HashSet<>();

        Arrays.sort(nums);

        for(int i = 0; i < nums.length - 2; i++) {
            int j = i + 1;
            int k = nums.length - 1;

            while(j < k) {
                int sum = nums[i] + nums[j] + nums[k];

                if(sum == 0) {
                    new_set.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                } else if(sum > 0) {
                    k--;
                } else {
                    j++;
                }
            }
        }
        return new ArrayList<>(new_set);
    }
}

PYTHON