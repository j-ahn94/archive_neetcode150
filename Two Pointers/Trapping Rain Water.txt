# 42. / HARD    

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.



Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.



Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: height = [4,2,0,3,2,5]
Output: 9



JASON'S ANALYSIS

ALGORITHM

Time - O(n)
space - O(n)

1. Look at maximum height on left and right 
2. Take minimum of the two (maximum left height and maximum right height)
3. Then subtract with current position element
4. If the calculation comes out as -1, then need to be adjusted to 0 (since there's no way to trap -1 water) (algorithm: min(L, R) - h[i] >= 0)
5. Add the sum in the values we will initialize
6. Loop through each of the elements in the array


TWO-POINTER ALGORITHM
Time - O(n)
space - O(1) [two-pointers algorithm]

1. Place left-pointer in the first element and right-pointer in the last element
2. Initialize maxLeft and maxRight variable
3. While looking both at left and right from its two pointers, update its maximum value(s)
4. Shift the pointer to either left or right that has the smaller maximum value
5. 
 
CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public int trap(int[] height) {
        if(height.length == 0) {
            return 0;
        }

        int l = 0;
        int r = height.length - 1;

        int leftMax = height[l];
        int rightMax = height[r];

        int res = 0;

        while(l < r) {
            if(leftMax < rightMax) {
                l += 1;
                leftMax = Math.max(leftMax, height[l]);
                res += leftMax - height[l];
            } else {
                r -= 1;
                rightMax = Math.max(rightMax, height[r]);
                res += rightMax - height[r];
            }
        }
        return res;
    }
}
PYTHON

class Solution:
    def trap(self, height: List[list]) -> int:
        if not height: return 0

        l, r = 0, len(height) - 1
        leftMax, rightMax = height[l], height[r]
        res = 0

        while l < r:
            if leftMax < rightMax:
                l += 1
                leftMax = max(leftMax, height[l])
                res += leftMax - height[l]
            else:
                r -= 1
                rightMax = max(rightMax, height[r])
                res += rightMax - height[r]
    
        return res


