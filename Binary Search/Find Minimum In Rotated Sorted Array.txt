# 153. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.


Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 


JASON'S ANALYSIS

If the elements are rotated, then nums[first] > nums[last].
If the elements are 'not' rotated, then nums[first] < nums[last], then simply return nums[first]

1. Conduct binary search
2. See whether middle element is smaller than the last element. If so, we need to look into left side. Therefore, right becomes middle
3. If middle element is larger than the last element, then it must be the case where the smallest element is between middle element to end element.
Therefore, first element becomes middle + 1.
4. Return nums[left]


ALGORITHM

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public int findMin(int[] nums) {
        int first = 0;
        int last = nums.length - 1;

        if(nums[first] < nums[last]) {
            return nums[first];
        }

        while(first < last) {
            int mid = first + (last - first) / 2;
            if(nums[mid] < nums[last]) {
                right = mid;
            } else {
                left = mid - 1;
            }
        }
        return nums[left];
    }
}


PYTHON