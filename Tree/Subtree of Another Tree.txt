# 572. / EASY

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false


JASON'S ANALYSIS
If subRoot or root is null, then we simply cannot calculate the duplicate.
We have to do recursion, 


ANALYSIS/PSEUDOCODE
1. 
CODE
------------------------------------------------------------------------------------------------------------------------------------------

Time - O(m * s)
Space - minimum between O(m) and O(n)

JAVA

class Solution {
    public boolean isSubTree(TreeNode s, TreeNode t) {
        if(s == null) {
            return false;
        } else if(isSameTree(s, t)) {
            return true;
        } else {
            return isSubTree(s.left, t) || isSubTree(s.right, t);
        }
    }

    public boolean isSameTree(TreeNode s, TreeNode t) {
        if(s == null || t == null) {
            return s == null && t == null;
        } else if(s.val == t.val) {
            return isSameTree(s.left, t.left) && isSameTree(s.right, t.right);
        } else {
            return false;
        }
    }
}


PYTHON

class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        # order matters between 'if not t' and 'if not s'
        # if we did not return first if statement, then we will assume that t is non-empty
        if not t: return True
        if not s: return False

        self.sameTree(s, t):
            return True
        
        return (self.isSubtree(s.left, t) or
                self.isSubtree(s.right, t))


    def sameTree(self, s, t):
        # if both of the trees are empty, return true
        if not s and not t:
            return True

        # if both of the trees are not-empty and the values are the same, then look at both left and right
        if s and t and s.val == t.val:
            return (self.sameTree(s.left, t.left) and 
            self.sameTree(s.right, t.right))

        # at least one of the tree is empty and other is not-empty, we return false
        return False
        

        