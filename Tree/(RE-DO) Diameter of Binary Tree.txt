# 543. / EASY

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [1,2]
Output: 1


JASON'S ANALYSIS

ANALYSIS/PSEUDOCODE
1. Normally, we would find the diameter from the tree starting at the 'base' case, where time complexity will be O(n^2)
2. To optimize as O(n), initialize max variable to 0. 
3. Find the max tree branch at both left and right side of its tree. This includes visiting each children branch as well.
4. For each of the node, we want 'diameter' and 'height' (maximum height comparing both left and right sub-tree) of tree
   When finding out height, we need to add 1 to it because the tree we're looking at itself has its own diameter as well
   When finding out diameter, we need to add 2 to it because the tree we're looking at itself has its own 'left' and 'right' diameter as well
6. Maintain the max height

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    int max = Integer.MIN_VALUE;
    public int diameterOfBinaryTree(TreeNode root) {
        dfs(root);
        return max;
    }

    private int dfs(TreeNode node) {
        int left = 0;
        int right = 0;

        if(node.left != null) {
            left = dfs(node.left);
        }

        if(node.right != null) {
            right = dfs(node.right);
        }

        max = Math.max(max, left + right);

        return Math.max(left, right) + 1;
    }
}


PYTHON

class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        res = [0]

        def dfs(root):
            if not root:
                return -1
            left = dfs(root.left)
            right = dfs(root.right)
            res[0] = max(res[0], 2 + left + right)

            return 1 + max(left, right)
        
        dfs(root)
        return res[0]
