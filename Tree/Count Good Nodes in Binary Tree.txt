# 1448. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.

Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [1]
Output: 1
Explanation: Root is considered as good.


JASON'S ANALYSIS

ANALYSIS/PSEUDOCODE

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    int count = 0;
    public int goodNodes(TreeNode root) {
        // test input
        if (root==null) return count;
        // start dfs
        dfs(root, root.val);
        return count;
    }
    
    private void dfs(TreeNode root, int val) {
        if (root==null) return;
        
        if (root.val >= val) count++;
        
        //  In exampe 1, from path 3->1->3 we send
        //     maximum value for comparision.
        //     Why? Because if we send 1 (i.e. don't
        //     send max value), we'll count 1 as the 
        //     start of the path and increment count.
        //     This is not correct because we are not
        //     considering the already present maximum
        //     value (i.e. 3)
        dfs(root.left, Math.max(val, root.val));
        dfs(root.right, Math.max(val, root.val));
    }
}

PYTHON