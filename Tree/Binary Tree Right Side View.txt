# 199. / BINARY TREE RIGHT SIDE VIEW

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = [1,null,3]
Output: [1,3]

Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: root = []
Output: []


JASON'S ANALYSIS

1. Conduct DFS recursion to only look at the 'very right' node from the Tree
2. First intuition is to conduct recursion by calling itself rightSideView(root.right). But this will return the entire subtrees from the root node.
3. OR maybe we can conduct BFS (level order traversal) and look at only the right side of the node?
4. In other words, in each 'level' of the tree, we want to right-most node.
5. N/A
6. 

ANALYSIS/PSEUDOCODE

1. Conduct 'level-order traversal' to find and add the right most node in each level. 
2. a.To create 'level-order traversal', we implement Queue data structure. We also need to create 'result array' to add the elements that has been to the Queue.
   b.In the Queue data structure, we add all the left and right node in each level. From the queue, we take out the 'right-most value' and add it to the res variable.
   c.Add the left and right child from each tree AND delete its trees from the Queue. So now we are left with the bottom subtrees. Do the same thing for (b) until all the
   subtrees are null.

CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if(i == size - 1) {
                    // last element in current level
                    result.add(node.val);
                }
                if(node.left != null) {
                    queue.add(node.left);
                }
                if(node.right != null) {
                    queue.add(node.right);
                }
            }
        }
        return result;
    }
}


PYTHON

class Solution:
    def rightSideView(self, root: TreeNode) -> List[int]:
        res = []
        q = collections.deque([root])

        while q: #while the queue in non-empty, we will pop elements from queue
            rightSide = None
            qLen = len(q)

            for i in range(qLen):
                node = q.popleft()
                if node:
                    rightSide = node
                    q.append(node.left)
                    q.append(node.right)
            if rightSide:
                res.append(rightSide.val)
        
        return res