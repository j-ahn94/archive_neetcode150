# 287. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [1,3,4,2,2]
Output: 2


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [3,1,3,4,2]
Output: 3


JASON'S ANALYSIS

Utilize bit manipulation.
Return the value that overlaps with each other.

Linear run-time complexity - using bit manipulation.

However, how can you solve the problem where you remember the last element? For example, if it's [1, 2, 4, 2, 3], how do you know whether
there's 2 two's?


ANALYSIS/PSEUDOCODE

Need to recognize two things for this problem. We need to know that the question needs to be solved by:

len = n + 1
nums[i] in [1, n]

1) Application of 1) Linked List Cycle and 2) Floyd's Algorithm
1. Instead of thinking elements as values, think of elements as 'pointers' that point to the length of the array. Therefore, none of the pointers point outside the range.
2. None of  the pointers will point to 0 since the number of the elements range from [1, n].
3. For the duplicate number, we know that multiple nodes will point to the duplicate number. Therefore, there will be a cycle within the pointer.
4. Utilize slow & fast pointer (2 * slow = fast)
                                         

Sorting:
Time - O(nlongn)

[1,7,3,4,3,3,5] -> [1,3,3,3,4,5,7]


Add to HashSet:
Time - O(n)
Space - O(n)

if(!hs.containsKey(nums[i]) {
    hs.add(nums[i]);
} else {
    return nums[i];
}

Loop in linked list:
Time - O(n)
Space - O(1)

nums = 2 6 4 1 3 1 5
index= 0 1 2 3 4 5 6

1. Index 0 has nums 2, so move to index 2 with nums 4
2. Index 2 has nums 4, so move to index 4 with nums 3
3. Index 4 has nums 3, so move to index 3 with nums 1
continue..

based on index: 2 -> 4 -> 3 -> 1 -> 6 -> 5 -> 1

Find a loop in linked list and find the starting point of the loop, which will be the duplicate number in the array.
Return starting point of the loop, which is 1.

Instruction
--------------------------------
Start 2 pointers
    Fast moves 2 nodes at a time
    Slow moves 1 node at a time

Wait for them to meet

As soon as they meet
    Move fast pointer to head
    Move both pointers at same speed

Wait for them to meet again

They will meet at the starting of loop



CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public int findDuplicate(int[] nums) {
        
        // Find the intersection point of the two runners.
        int tortoise = nums[0];
        int hare = nums[0];
        
        do {
            tortoise = nums[tortoise];
            hare = nums[nums[hare]];
        } while (tortoise != hare);

        // Find the "entrance" to the cycle.
        tortoise = nums[0];
        
        while (tortoise != hare) {
            tortoise = nums[tortoise];
            hare = nums[hare];
        }

        return hare;
    }
}

public ListNode detectCycle(ListNode head) {
    // Start both from head
    ListNode slow = head, fast = head;

    // Advance both at different speeds
    // until they meet once
    while(fast != null && fast.next != null) {
        fast = fast.next.next;
        slow = slow.next;

        // As soon as they meet, start from the
        // head again and move at the same speed
        if (slow == fast) {
            while(head != slow) {
                head = head.next;
                slow = slow.next;
            }
            return slow;
        }
    }
    return null;
}

PYTHON

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow, fast = 0, 0
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break
        
        slow2 = 0
        while True:
            slow = nums[slow]
            slow2 = nums[slow2]
            if slow == slow2:
                return slow