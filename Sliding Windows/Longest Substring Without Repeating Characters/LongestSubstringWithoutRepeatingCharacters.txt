# 3. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given a string s, find the length of the longest substring without repeating characters.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3
------------------------------------------------------------------------------------------------------------------------------------------
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

JASON'S ANALYSIS

First approach is to use two-pointer (ie. sliding window) and using hashset to record which character was seen.

"abcabcbb"

a <- inserts into hashset
b <- inserts into hashset
c <- inserts into hashset
a <- inserts into hashset BUT a already exists so everything needs to be reset



ALGORITHM

Neetcode (https://www.youtube.com/watch?v=wiGpQwVHdE0)

Use sliding window approach and whenever duplicates are found, remove the value starting from left-to-right until the duplicate value is removed from the hash set.




CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public int longestSubsequence(String s) {
        int i = 0;
        int j = 0;
        int max = 0;

        Set<Character> set = new HashSet<>();

        while(j < s.length()) {
            if(!set.contains(s.charAt(j))) {
                set.add(s.charAt(j));
                j++;
                max = Math.max(max, set.size());
            } else {
                set.remove(s.charAt(i));
                i++;
            }
        }
        return max;
    }
}


PYTHON

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charSet = set()
        l = 0
        r = 0;
        max = 0;
        
        for r in range(len(s)):
            while s[r] in charSet:
                charSet.remove(s[l])
                l += 1
            charSet.add(s[r])
            max = max(res, r - l + 1)
        return max