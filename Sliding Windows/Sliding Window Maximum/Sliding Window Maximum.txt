# 239. / SLIDING WINDOW MAXIMUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [1], k = 1
Output: [1]



JASON'S ANALYSIS

Create a window with a size of 'k'
Create array list
Retrieve maximum number and add it to array list
Keep doing until first number of the loop - k
Return array list

Time - O(k * (n - k))

class Solution {
    public int[] maxWindow(int[] window, int k) {
        int[] array = new ArrayList();

        // Create a for-loop that runs til the k-th element
        for(int i = 0; i < window.length; i++) {
            while(i < k && k < window.length) {
                int max = Math.max(max, window[i]);
                i++;
            }
            array.add(max);
            k++;
        }

        return array;

    }
}


ALGORITHM

NeetCode (https://www.youtube.com/watch?v=DfljaUwZsOk)

Time - O(n)

If there is a value that is greater than previous window, we can eliminate the values from window.

How to solve? Use 'deque' - always decreasing order

Monotonically Decreasing Queue - Add each value in the 'deque' deck and when we see a value greater, 'pop' the values less than it and add the new value to the output array.
                                 If the value is less than previous values (ie.[9, 6, 4]), look at left-most value from the deck and add it to the output array. Next, pop the left-most value from the deque deck.
Deque - O(1)

Deque will always be organized in decreasing order

*Queue - add elements at the end
         remove elements in the beginning

*Deque - add and remove elements at both end




CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums == null || nums.length == 0 || k > nums.length) {
            return new int[0]; // return empty result
        }

        int res[] = new int[nums.length - k + 1]; //numSize: 3, k: 2 ==> 3 - 2 + 1
        
        // index dq
        Deque<Integer> dq = new ArrayDeque<>();

        // pointer
        int i = 0;

        while(i < nums.length) {

            // if deck is not empty and if any number is moved out of the window, then pop first one and start from the right side of the deck
            if(!dq.isEmpty() && dq.peekFirst() == i - k) {
                dq.pollFirst();
            }

            // start from right side of the deck and if there's any number that is less than current number,
            // then remove the num[dq.peekLast()]
            while(!dq.isEmpty() && nums[dq.peekLast()] < nums[i]) {
                dq.pollLast();
            }

            // add current number in the deck
            dq.offerLast(i);

            // check if i is big enough to form a window, then we grab very first two value from the deck
            // and get corresponding value from num's array and assign it to result
            if(i >= k - 1) {
                res[i - k + 1] = nums[dq.peekFirst()];
            }

            i++;
        }

        return res;
    }
}


PYTHON

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        output = []
        q = collections.deque() # index
        l = r = 0

        while r < len(nums):
            while q and nums[q[-1]] < nums[r]:
                q.pop()
            q.append(r)

            # remove left value from window
            if l > q[0]:
                q.popleft()

            if(r + 1) >= k:
                output.append(nums[q[0]])
                l += 1
            r += 1
        return output