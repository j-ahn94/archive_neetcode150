# 424. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. 
You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.



JASON'S ANALYSIS

Classic Sliding Window algorithm by recording what is the most repeating character. As long as 'k' (ie. given number) is less than (repeating character - elements to be changed + 1),
then record it in the variable.

Question is using 26 uppercase letter, so it requires using 26 arrays to store each letter. (ie. int[] upperCase = new int[26])

AABABBA

A ABABBA <- store 'A' to array by using (s.charAt(i) - 'A')
AA BABBA <- store another 'A' to array
AAB ABBA <- store 'B' to array
    *calculate how many 'k' left by doing 2 (A's) - 1 (B)



ALGORITHM

NeetCode (https://www.youtube.com/watch?v=gqXU1UyA8pk&t=993s)

The goal is for all windows to match most common character in that window. 

window length - count of most frequent character = number of characters that needs to be replaced to match most frequent character

Condition 1
-----------
number of characters needs to be replaced <= K     <- condition for current window to be valid

Condition 2
-----------
if 'number of characters needs to be replaced' > K <- condition for current window is not valid, so window needs to be shrunken until 'window size' - 'common character' <= 'K'





CODE


------------------------------------------------------------------------------------------------------------------------------------------

JAVA




PYTHON

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = {}  <- HashMap to count the occurrences in each character
        res = 0 <- return longest character with k replacement

        l = 0
        for r in range(len(s)):
            count[s[r]] = 1 + count.get(s[r], 0) <- increase the given character. If the character doesn't exist, then return 0 which is default value

            while (r - l + 1) - max(count.values()) > k:
                count[s[l]] -= 1
                l += 1

            res = max(res, r - l + 1) <- re-evaluate the size of the window
        return res

