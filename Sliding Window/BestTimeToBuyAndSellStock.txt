# 121. / Easy

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
------------------------------------------------------------------------------------------------------------------------------------------

Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
------------------------------------------------------------------------------------------------------------------------------------------

Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
------------------------------------------------------------------------------------------------------------------------------------------


JASON'S ANALYSIS

The question is asking to find two given stocks (one lowest, one highest) to find the maximum profit.
The profit can't be negative.
While calculating the values one-by-one, it is important to record 'lowest' value and 'highest' value.


ALGORITHM

Sliding Window approach - maintain and update the lowest value, highest value and highest value from (highest value - lowest value) while looping around the array

Time - O(n)
Space - O(1)


CODE

java

class Solution {
    public int maxProfit(int[] prices) {
        int res = 0; //important to initialize 'res' as 0. If the array is in descending order, then we need to simply return 0.
        int min = Integer.MAX_VALUE; //the reason why we set maximum value is we want to find what the actual minimum value is. Comparing with max value will allow us to find it.
        int max = Integer.MIN_VALUE; //same as above condition. We want to find maximum value from the array.
        for(int i: prices) {

        }

        for(int i = 0; i < prices[i]; i++) {
            if(prices[i] < min) {
                min = prices[i];
            } else {
                max = Math.max(max, prices[i] - min);
                res = Math.max(max, res);
            }
        }


        return res;
    }
}

