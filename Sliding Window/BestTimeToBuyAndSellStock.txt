# 121. / Easy

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
------------------------------------------------------------------------------------------------------------------------------------------

Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
------------------------------------------------------------------------------------------------------------------------------------------

Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
------------------------------------------------------------------------------------------------------------------------------------------


JASON'S ANALYSIS

The question is asking to find two given stocks (one lowest, one highest) to find the maximum profit.
The profit can't be negative.
While calculating the values one-by-one, it is important to record 'lowest' value and 'highest' value.

*Don't think of this question relating to sliding window since this question doesn't require to find the maximum/minimum subsequence of array..




ALGORITHM

Sliding Window approach - maintain and update the lowest value, highest value and highest value from (highest value - lowest value) while looping around the array

Time - O(n) //for-loop approach
Space - O(1) //everytime maximum value between two stocks are found, update the variable


CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public int maxProfit(int[] prices) {
        int res = 0; //initialize the return value to zero
        int maxSoFar = 0; //this variable is created to store the previous maximum value of stock return
        int min = Integer.MAX_VALUE; //to store minimum value in prices array, it is important to 

        for(int i = 0; i < prices.length; i++) {
            if(prices[i] < min) {
                min = prices[i]; 
            }
            maxSoFar = prices[i] - min; //although the first loop will arrive as '0', this variable will count the 'current' difference between each stock
            res = Math.max(res, maxSoFar); //stores what is the 'highest' integer from the loop so far
        }
        return res;
    }
}

PYTHON


