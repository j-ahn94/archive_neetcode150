# 49. / GROUP ANAGRAMS

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: strs = [""]
Output: [[""]]

Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: strs = ["a"]
Output: [["a"]]


JASON'S ANALYSIS

Use HashMap to sort the character in each string and compare between each string to see whether they match. If so, add it inside the same key.
If not, create a new HashMap key and store it in.

Syntactical issues along the way where String -> Character -> String -> List<String> conversion is difficult to grasp..


ALGORITHM

Similar approach as mine, but it would be better if the characters are not sorted and placed into hash map immediately and compare how many characters are in the key.
If there is the same amount of key, then add the string in the hash map key.


CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public List<List<String>> groupedAnagrams(String[] strs) {
        List<List<String>> groupedAnagram = new ArrayList<>();
        HashMap<String, List<String>> map = new HashMap<>();

        for(String current: strs) {
            char[] characters = current.toCharArray();
            Arrays.sort(characters);
            String sorted = new String(characters);

            if(!map.containsKey(sorted)) {
                map.put(sorted, new ArrayList<>());
            }
            map.get(sorted).add(current);
        }
        groupedAnagram.addAll(map.values());
        return groupedAnagram;
    }
}

Time: O(n * mlogm)    n: max number of words in 'strs'   m: largest size word in 'strs'


PYTHON