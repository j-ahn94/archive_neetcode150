# 128. / MEDIUM

QUESTION
------------------------------------------------------------------------------------------------------------------------------------------
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.


Example 1
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.


Example 2
------------------------------------------------------------------------------------------------------------------------------------------
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9


JASON'S ANALYSIS

ALGORITHM

Time: O(n)
Memory: O(n)

1. Iterate through initial array
2. Create Hash Set and add the arrays
3. Check whether the array has left neighbour (ie. if array element is 10, then check if the left neighbour (9) exists.)
4. If left neighbour does not exist, then create a new sequence


CODE
------------------------------------------------------------------------------------------------------------------------------------------

JAVA

class Solution {
    public int longestConsecutive(int[] nums) {
        // O(n) complexity
        Set<Integer> hs = new HashSet<Integer>();
        for(int i = 0; i < nums.length; i++) {
            hs.add(nums[i]);
        }

        int longest = 0;

        for(int i: nums) {
            if(!hs.contains(i - 1)) {
                int length = 0;
                while(hs.contains(i + length)) {
                    length += 1;
                }
                longest = Math.max(length, longest);
            }
        }
        return longest;
        
    }
}


PYTHON

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        numSet = set(nums)
        longest = 0

        for n in nums:
            # check if its the start of a sequence
            if(n - 1) not in numSet:
                length = 0
                while (n + length) in numSet:
                    length += 1
                longest = max(length, longest)
        return longest